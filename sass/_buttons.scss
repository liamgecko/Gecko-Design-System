// stylelint-disable selector-no-qualifying-type

//
// Base styles
//

.btn {
    display: inline-block;
    font-family: $btn-font-family;
    font-weight: $btn-font-weight;
    color: $body-color;
    text-align: center;
    vertical-align: middle;
    user-select: none;
    background-color: transparent;
    border: $btn-border-width solid transparent;
    @include button-size($btn-padding-y, $btn-padding-x, $btn-font-size, $btn-line-height, $btn-border-radius);
    @include transition($btn-transition);
  
    @include hover {
      color: $body-color;
      text-decoration: none;
    }
  
    &:focus,
    &.focus {
      outline: 0;
      box-shadow: $btn-focus-box-shadow;
    }
   
    // Disabled comes first so active can properly restyle
    &.disabled,
    &:disabled {
      opacity: $btn-disabled-opacity;
      @include box-shadow(none);
    }
  
    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active {
      @include box-shadow($btn-active-box-shadow);
  
      &:focus {
        @include box-shadow($btn-focus-box-shadow, $btn-active-box-shadow);
      }
    }
  }
  
  // Future-proof disabling of clicks on `<a>` elements
  a.btn.disabled,
  fieldset:disabled a.btn {
    pointer-events: none;
  }
  
  //
  // Alternate buttons
  //
  
  @each $color, $value in $ui-colors {
    .btn-#{$color} {
      @include button-variant($value, $value);
    }
  }
  
  @each $color, $value in $ui-colors {
    .btn-outline-#{$color} {
      @include button-outline-variant($value);
    }
  }
  
  //
  // Link buttons
  //
  
  // Make a button look and behave like a link
  .btn-link {
    font-weight: $font-weight-normal;
    color: $link-color;
    text-decoration: $link-decoration;
  
    @include hover {
      color: $link-hover-color;
      text-decoration: $link-hover-decoration;
    }
  
    &:focus,
    &.focus {
      text-decoration: $link-hover-decoration;
      box-shadow: none;
    }
  
    &:disabled,
    &.disabled {
      color: $btn-link-disabled-color;
      pointer-events: none;
    }
  
    // No need for an active state here
  }
  
  //
  // Button Sizes
  //
  
  .btn-lg {
    @include button-size($btn-padding-y-lg, $btn-padding-x-lg, $btn-font-size-lg, $btn-line-height-lg, $btn-border-radius-lg);
  }
  
  .btn-sm {
    @include button-size($btn-padding-y-sm, $btn-padding-x-sm, $btn-font-size-sm, $btn-line-height-sm, $btn-border-radius-sm);
  }
  
  //
  // Block button
  //
  
  .btn-block {
    display: block;
    width: 100%;
  
    // Vertically space out multiple block buttons
    + .btn-block {
      margin-top: $btn-block-spacing-y;
    }
  }
  
  // Specificity overrides
  input[type="submit"],
  input[type="reset"],
  input[type="button"] {
    &.btn-block {
      width: 100%;
    }
  }
  
//
// Naked button
//

.btn.btn-naked {
    font-weight: $font-weight-medium;
    background: none;
    border: $border-width solid transparent;
    color: $body-color;
    &:hover,
    &:focus,
    &.focus,
    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active {
        background: $grey-lighten-5;
        color: $body-color;
        box-shadow: none;
        border: $border-width solid $grey-lighten-5;
    }
}

.btn-naked.disabled,
.btn-naked:disabled,
.btn-naked.disabled:hover,
.btn-naked:disabled:hover {
    background: none;
    border: $border-width solid transparent;
}

// Make the div behave like a button
.btn-group {
  position: relative;
  display: inline-flex;
  vertical-align: middle; // match .btn alignment given font-size hack above

  > .btn {
    position: relative;
    flex: 1 1 auto;

    // Bring the hover, focused, and "active" buttons to the front to overlay
    // the borders properly
    @include hover {
      z-index: 1;
    }
    &:focus,
    &:active,
    &.active {
      z-index: 1;
    }
  }
}

.btn-group {
  // Prevent double borders when buttons are next to each other
  > .btn:not(:first-child),
  > .btn-group:not(:first-child) {
    margin-left: -$btn-border-width;
  }

  // Reset rounded corners
  > .btn:not(:last-child):not(.dropdown-toggle),
  > .btn-group:not(:last-child) > .btn {
    @include border-right-radius(0);
  }

  > .btn:not(:first-child),
  > .btn-group:not(:first-child) > .btn {
    @include border-left-radius(0);
  }
}

// Sizing
//
// Remix the default button sizing classes into new ones for easier manipulation.

.btn-group-sm > .btn { @extend .btn-sm; }
.btn-group-lg > .btn { @extend .btn-lg; }

// Checkbox and radio options
//
// In order to support the browser's form validation feedback, powered by the
// `required` attribute, we have to "hide" the inputs via `clip`. We cannot use
// `display: none;` or `visibility: hidden;` as that also hides the popover.
// Simply visually hiding the inputs via `opacity` would leave them clickable in
// certain cases which is prevented by using `clip` and `pointer-events`.
// This way, we ensure a DOM element is visible to position the popover from.

.btn-toggle {
  > .btn,
  > .btn-group > .btn {
    margin-bottom: 0; 
    cursor: pointer;

    input[type="radio"],
    input[type="checkbox"] {
      position: absolute;
      clip: rect(0, 0, 0, 0);
      pointer-events: none;
    }
  }
}

//
// Collapse button
//

.btn-collapse {
  padding: 0;
  display: block;
  width: 100%;
  text-align: left;
  box-shadow: none !important;
  .fa {
    font-weight: 400;
  }
}

[data-toggle="collapse"] .fa:before {  
  content: "\f106";
}

[data-toggle="collapse"].collapsed .fa:before {
  content: "\f107";
}